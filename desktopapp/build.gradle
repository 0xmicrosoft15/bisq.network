plugins {
    id 'bisq.java-library'
    id 'application'
   /* id 'distribution'*/ //todo as long we dont need a jar we leave that out, speeds up build
    alias(libs.plugins.openjfx)
    alias(libs.plugins.jpackage)
    alias(libs.plugins.shadow)
}

apply from: '../buildSrc/bisq-version.gradle'

application {
    project.mainClassName = 'bisq.desktopapp.Main'
    applicationDefaultJvmArgs = ['--add-exports', 'javafx.controls/com.sun.javafx.scene.control.behavior=ALL-UNNAMED',
                                 '--add-exports', 'javafx.controls/com.sun.javafx.scene.control=ALL-UNNAMED',
                                 '--add-opens', 'java.base/java.lang.reflect=ALL-UNNAMED']
}

run {
    // Pass command-line properties to application
    // Normally they'd only be applied to the gradle process, but we need them in the started application
    // See https://stackoverflow.com/a/23689696
    systemProperties System.getProperties()
}

distributions {
    main {
        distributionBaseName = 'jfx-dist'
    }
}

tasks.named('jar') {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Main-Class': 'bisq.desktopapp.Main')
    }
}

javafx {
    version = '16'
    modules = ['javafx.base', 'javafx.controls', 'javafx.graphics']
}

apply from: '../buildSrc/logging-dependencies.gradle'
apply from: '../buildSrc/test-dependencies.gradle'

dependencies {
    api platform(project(':platforms:common-platform'))

    implementation project(':common')
    implementation project(':persistence')
    implementation project(':i18n')
    implementation project(':security')
    implementation project(':identity')
    implementation project(':network')
    implementation project(':account')
    implementation project(':offer')
    implementation project(':contract')
    implementation project(':protocol')
    implementation project(':oracle')
    implementation project(':settings')
    implementation project(':social')
    implementation project(':presentation')
    implementation project(':application')
    implementation project(':wallets')
    implementation project(':desktop')

    implementation libs.google.guava

    implementation 'com.jfoenix:jfoenix:9.0.10'
    implementation 'de.jensd:fontawesomefx:8.0.0'
    implementation 'de.jensd:fontawesomefx-commons:9.1.2'
    implementation 'de.jensd:fontawesomefx-materialdesignfont:2.0.26-9.1.2'
    implementation 'org.controlsfx:controlsfx:11.1.1'

    implementation "org.fxmisc.easybind:easybind:1.0.3"
    implementation 'org.fxmisc.richtext:richtextfx:0.10.9'

}

distZip.enabled = false
distTar.enabled = false
shadowDistZip.enabled = false
shadowDistTar.enabled = false

tasks.jpackage {
    dependsOn rootProject.clean
    dependsOn tasks.clean // Ensure fresh buildDir for every jpackager binary build
    dependsOn tasks.jar, tasks.shadowJar

    // The jpackageTempDir stores temp files used by jpackage for building the installers
    // It can be inspected in order to troubleshoot the packaging process
    File jpackageTempDir = new File(buildDir, "jpackage-temp")

    appName = "Bisq 2"
    // Remove the -SNAPSHOT suffix from the version string (originally defined in build.gradle)
    // Having it in would have resulted in an invalid version property for several platforms (mac, linux/rpm)
    appVersion = version.replaceAll("-SNAPSHOT", "")
    copyright = 'Copyright (c) 2013-2022 The Bisq developers'
    appDescription = 'A decentralized bitcoin exchange network.'
    vendor = 'Bisq'
    mainClass = "bisq.desktopapp.Main"
    mainJar = jar.archiveFileName.get()
    verbose = false
//    arguments = --arguments <main class arguments>
    destination = "$buildDir/$distsDirName"
    input  = "$buildDir/$libsDirName"
    licenseFile = "../LICENSE"
//    resourceDir = --resource-dir <resource dir path> // TODO
    runtimeImage = System.getProperty("java.home")
    temp = jpackageTempDir
//    launchers = --add-launcher <name>=<property file> // TODO add multiple launchers? desktopapp / satoshiapp

    winMenu = true
    winDirChooser = true
//    winUpgradeUuid = win-upgrade-uuid <id string> // TODO
//    winMenuGroup = --win-menu-group <menu group name> // TODO
    winShortcut = true
    winPerUserInstall = true
    winConsole = false

//    macPackageIdentifier = --mac-package-identifier <ID string> // TODO
//    macPackageName = --mac-package-name <name string> // TODO
//    macPackageSigningPrefix = --mac-package-signing-prefix <prefix string> // TODO
    macSign = false
//    macSigningKeychain = --mac-signing-keychain <file path> // TODO
//    macSigningKeyUserName = --mac-signing-key-user-name <team name> // TODO

    linuxPackageName = 'bisq2'
    linuxDebMaintainer = 'noreply@bisq.network'
    linuxMenuGroup = 'Network'
    linuxRpmLicenseType = 'AGPLv3' // https://fedoraproject.org/wiki/Licensing:Main?rd=Licensing#Good_Licenses
    // This represents the linux package version (revision)
    // By convention, this is part of the deb/rpm package names, in addition to the software version
    linuxAppRelease = '1'
//    linuxAppCategory = --linux-app-category <category value> // TODO
    linuxShortcut = true

    mac {
        // Avoid error "The first number in an app-version cannot be zero or negative."
        appVersion = appVersion.startsWith('0') ? '1.0.0' : appVersion
//        icon = "icons/icons.icns" // TODO
    }

    linux {
        // Setting runtimeImage to java.home failed when using JDK from package manager (user vs root ownership of files?)
        // runtimeImage can alternatively be set to a downloaded and extracted JDK
        // Worked well when using IntelliJ IDEA SDKs (File > Project Structure > SDKs > + > Download JDK)
        runtimeImage = "/home/user/.jdks/openjdk-17.0.2"
//        icon = "icons/icons.ico" // TODO
    }

    additionalParameters = ['--verbose']

    javaOptions = [
            '--add-exports', 'javafx.controls/com.sun.javafx.scene.control.behavior=ALL-UNNAMED',
            '--add-exports', 'javafx.controls/com.sun.javafx.scene.control=ALL-UNNAMED',
            '--add-opens', 'java.base/java.lang.reflect=ALL-UNNAMED'
    ]

    doFirst() {
        jpackageTempDir.mkdirs()
    }

    doLast() {
        File binariesFolderPath = new File("$buildDir/$distsDirName")
        ant.checksum(algorithm: 'SHA-256') {
            ant.fileset(dir: "${binariesFolderPath}")
        }
        println "The binaries and checksums are ready:"
        FileCollection collection = layout.files { binariesFolderPath.listFiles() }
        collection.collect { it.path }.sort().each { println it }
    }
}