syntax = "proto3";
package network;
option java_package = "bisq.network.protobuf";
option java_multiple_files = true;
import "common.proto";
import "network_common.proto";
import "network_identity.proto";
import "security.proto";
import "google/protobuf/any.proto";

////////////////////////////////////////////////////////////////////
// Data
////////////////////////////////////////////////////////////////////

message Capability {
  network.common.Address address = 1;
  repeated string supportedTransportTypes = 2;
}

message NetworkLoad {
  double value = 1;
}

message FilterEntry {
  bytes hash = 1;
  sint32 sequenceNumber = 2;
}

message DataFilter {
  repeated FilterEntry filterEntries = 1;
}

message Inventory {
  repeated DataRequest entries = 1;
  bool maxSizeReached = 2;
}

message Peer {
  Capability capability = 1;
  NetworkLoad networkLoad = 2;
  bool isOutboundConnection = 3;
  sint64 created = 4;
}

////////////////////////////////////////////////////////////////////
// NetworkMessages
////////////////////////////////////////////////////////////////////

message ConnectionHandshake {
  message Request {
    Capability capability = 1;
    optional bytes addressOwnershipProof = 2;
    NetworkLoad networkLoad = 3;
  }
  message Response {
    Capability capability = 1;
    NetworkLoad networkLoad = 2;
  }
}

message CloseConnectionMessage {
  string closeReason = 1;
}

message PeerExchangeRequest {
  sint32 nonce = 1;
  repeated Peer peers = 2;
}
message PeerExchangeResponse {
  sint32 nonce = 1;
  repeated Peer peers = 2;
}

message AddressValidationRequest {
  sint32 nonce = 1;
}
message AddressValidationResponse {
  sint32 requestNonce = 1;
}

message Ping {
  sint32 nonce = 1;
}
message Pong {
  sint32 requestNonce = 1;
}

message NetworkLoadExchangeRequest {
  sint32 nonce = 1;
  NetworkLoad networkLoad = 2;
}

message NetworkLoadExchangeResponse {
  sint32 requestNonce = 1;
  NetworkLoad networkLoad = 2;
}

message ConfidentialMessage {
  security.ConfidentialData confidentialData = 1;
  string receiverKeyId = 2;
}

message AckMessage {
  string id = 1;
}


message InventoryRequest {
  DataFilter dataFilter = 1;
  sint32 nonce = 2;
}
message InventoryResponse {
  Inventory inventory = 1;
  sint32 requestNonce = 2;
}

message ExternalNetworkMessage {
  google.protobuf.Any any = 1;
}


////////////////////////////////////////////////////////////////////
// EnvelopePayloadMessage types
////////////////////////////////////////////////////////////////////

message EnvelopePayloadMessage {
  oneof message {
    ConnectionHandshake.Request connectionHandshakeRequest = 1;
    ConnectionHandshake.Response connectionHandshakeResponse = 2;

    CloseConnectionMessage closeConnectionMessage = 3;

    PeerExchangeRequest peerExchangeRequest = 4;
    PeerExchangeResponse peerExchangeResponse = 5;

    AddressValidationRequest addressValidationRequest = 6;
    AddressValidationResponse addressValidationResponse = 7;

    Ping ping = 8;
    Pong pong = 9;

    ConfidentialMessage confidentialMessage = 10;
    AckMessage ackMessage = 11;

    InventoryRequest inventoryRequest = 12;
    InventoryResponse inventoryResponse = 13;

    DataRequest dataRequest = 14;

    NetworkLoadExchangeRequest networkLoadExchangeRequest = 15;
    NetworkLoadExchangeResponse networkLoadExchangeResponse = 16;

    // Wrapper for NetworkMessages defined in other modules like PrivateChatMessage which are wrapped in an Any blob
    ExternalNetworkMessage externalNetworkMessage = 17;
  }
}


////////////////////////////////////////////////////////////////////
// DataRequests
////////////////////////////////////////////////////////////////////

message MetaData {
  sint64 ttl = 1;
  sint32 priority = 2;
  sint32 maxMapSize = 3;
  string className = 4;
}
message AuthorizedData {
  optional bytes signature = 1;
  bytes authorizedPublicKeyBytes = 2;
}
message DefaultAuthenticatedData {
}
message AuthenticatedData {
  google.protobuf.Any distributedData = 1;
  oneof message {
    DefaultAuthenticatedData defaultAuthenticatedData = 10;
    AuthorizedData authorizedData = 11;
  }
}
message AuthenticatedSequentialData {
  AuthenticatedData authenticatedData = 1;
  sint32 sequenceNumber = 2;
  bytes pubKeyHash = 3;
  sint64 created = 4;
}
message AddAuthenticatedDataRequest {
  AuthenticatedSequentialData authenticatedSequentialData = 1;
  bytes signature = 2;
  bytes ownerPublicKeyBytes = 3;
}
message RemoveAuthenticatedDataRequest {
  MetaData metaData = 1;
  bytes hash = 2;
  bytes ownerPublicKeyBytes = 3;
  sint32 sequenceNumber = 4;
  bytes signature = 5;
  sint64 created = 6;
}
message RefreshAuthenticatedDataRequest {
  MetaData metaData = 1;
  bytes hash = 2;
  bytes ownerPublicKeyBytes = 3;
  sint32 sequenceNumber = 4;
  bytes signature = 5;
}

message MailboxData {
  ConfidentialMessage confidentialMessage = 1;
  MetaData metaData = 2;
}
message MailboxSequentialData {
  MailboxData mailboxData = 1;
  sint32 sequenceNumber = 2;
  bytes senderPublicKeyHash = 3;
  sint64 created = 4;
  bytes receiversPubKeyBytes = 5;
  bytes receiversPubKeyHash = 6;
}
message AddMailboxRequest {
  MailboxSequentialData mailboxSequentialData = 1;
  bytes signature = 2;
  bytes senderPublicKeyBytes = 3;
}
message RemoveMailboxRequest {
  MetaData metaData = 1;
  bytes hash = 2;
  bytes receiverPublicKeyBytes = 3;
  bytes signature = 4;
  sint64 created = 5;
}

message AddAppendOnlyDataRequest {
  google.protobuf.Any appendOnlyData = 1;
}

////////////////////////////////////////////////////////////////////
// DataRequest types
////////////////////////////////////////////////////////////////////

message DataRequest {
  oneof message {
    AddAuthenticatedDataRequest addAuthenticatedDataRequest = 1;
    RemoveAuthenticatedDataRequest removeAuthenticatedDataRequest = 2;
    RefreshAuthenticatedDataRequest refreshAuthenticatedDataRequest = 3;

    AddMailboxRequest  addMailboxRequest = 4;
    RemoveMailboxRequest removeMailboxRequest = 5;

    AddAppendOnlyDataRequest addAppendOnlyDataRequest = 6;
  }
}


////////////////////////////////////////////////////////////////////
// NetworkEnvelope
////////////////////////////////////////////////////////////////////

message AuthorizationToken {
  security.ProofOfWork proofOfWork = 1;
  sint32 messageCounter = 2;
}

message NetworkEnvelope {
  sint32 version = 1;
  AuthorizationToken authorizationToken = 2;
  EnvelopePayloadMessage networkMessage = 3;
}

enum MessageDeliveryStatus {
  MESSAGEDELIVERYSTATUS_UNSPECIFIED = 0;
  MESSAGEDELIVERYSTATUS_SENT = 1;
  MESSAGEDELIVERYSTATUS_ARRIVED = 2;
  MESSAGEDELIVERYSTATUS_ADDED_TO_MAILBOX = 3;
  MESSAGEDELIVERYSTATUS_MAILBOX_MSG_RECEIVED = 4;
  MESSAGEDELIVERYSTATUS_FAILED = 5;
}


////////////////////////////////////////////////////////////////////
// Stores
////////////////////////////////////////////////////////////////////

message DataStore {
  message MapEntry {
    .common.ByteArray key = 1;
    DataRequest value = 2;
  }
  repeated MapEntry mapEntries = 1;
}

message NetworkServiceStore {
  repeated network.common.AddressByTransportTypeMap seedNodes = 1;
}

message MessageDeliveryStatusStore {
  map<string, MessageDeliveryStatus> messageDeliveryStatusByMessageId = 1;
}


message PeerGroupStore {
  repeated Peer persistedPeers = 1;
}
    