plugins {
    id 'java-platform'
    id 'maven-publish'
}


// As a platform, this enforces the versions defined below on ALL dependencies (incl. transitive)
// https://docs.gradle.org/7.4.1/userguide/platforms.html#sub:platforms-vs-catalog
// Note: this doesn't support constraints on plugin versions
dependencies {
    constraints {
        /////////////////////////////////////////////////////////////////////////////////
        // Annotation dependency constraints
        /////////////////////////////////////////////////////////////////////////////////
        api('javax.annotation:javax.annotation-api') {
            version { require '1.3.2' }
        }

        /////////////////////////////////////////////////////////////////////////////////
        // Typesafe configuration dependency constraints
        /////////////////////////////////////////////////////////////////////////////////
        api(libs.typesafe.config)

        /////////////////////////////////////////////////////////////////////////////////
        // Protobuf dependency constraints
        /////////////////////////////////////////////////////////////////////////////////
        api(libs.protobuf.java)

        /////////////////////////////////////////////////////////////////////////////////
        // Guava and transitive dependency constraints
        /////////////////////////////////////////////////////////////////////////////////
        api(libs.guava)
        // Declaring the guava dependency above will bring in the transitive dependencies below.
        // If some other dependency brings in other versions of the transitive dependencies below,
        // they should be excluded.
        api('org.checkerframework:checker-qual') {
            version { require '3.13.0' }
        }
        api('com.google.code.findbugs:jsr305') {
            version { require '3.0.2' }
        }
        api('com.google.errorprone:error_prone_annotations') {
            version { require '2.5.1' }
        }
        api('com.google.j2objc:j2objc-annotations') {
            version { require '1.3' }
        }
        api('com.google.guava:failureaccess') {
            version { require '1.0.1' }
        }
        api('com.google.guava:listenablefuture') {
            version { require '9999.0-empty-to-avoid-conflict-with-guava' }
        }

        /////////////////////////////////////////////////////////////////////////////////
        // RxJava dependency constraints
        /////////////////////////////////////////////////////////////////////////////////
        api('io.reactivex.rxjava2:rxjava') {
            version { require '2.1.12' }
        }

        /////////////////////////////////////////////////////////////////////////////////
        // Gson dependency constraints
        /////////////////////////////////////////////////////////////////////////////////
        api('com.google.code.gson:gson') {
            version { require '2.8.6' }
        }

        /////////////////////////////////////////////////////////////////////////////////
        // Logging dependency constraints
        /////////////////////////////////////////////////////////////////////////////////
        api(libs.slf4j.api)
        api(libs.logback.core)
        api(libs.logback.classic)

        // The runtime configuration should be used to declare
        // constraints or dependencies which are visible at runtime.
        runtime(libs.slf4j.api)
    }
}
