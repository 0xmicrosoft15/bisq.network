/*
 * This file is part of Bisq.
 *
 * Bisq is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or (at
 * your option) any later version.
 *
 * Bisq is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public
 * License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Bisq. If not, see <http://www.gnu.org/licenses/>.
 */

syntax = "proto3";

package social;
option java_package = "bisq.social.protobuf";
option java_multiple_files = true;
import "common.proto";
import "network.proto";
import "security.proto";
import "identity.proto";


message ProofOfBurnProof {
  string txId = 1;
  uint64 burntAmount = 2;
  uint64 date = 3;
}
message BondedRoleProof {
  string txId = 1;
  string signature = 2;
}
message InvitationProof {
  string invitationCode = 1;
}
message Proof {
  enum Type {
    PROOF_OF_BURN = 0;
    BONDED_ROLE = 1;
    CHANNEL_ADMIN_INVITATION = 2;
  }
  oneof message {
    ProofOfBurnProof proofOfBurnProof = 1;
    BondedRoleProof bondedRoleProof = 2;
    InvitationProof invitationProof = 3;
  }
}

message Role {
  enum Type {
    CHANNEL_ADMIN = 0;
    CHANNEL_MODERATOR = 1;
    MEDIATOR = 2;
  }
 
  string type = 1;
  Proof proof = 2;
}


message Reputation {
  enum Type {
    BURNED_BSQ = 0;
    BURNED_BSQ_AGE = 1;
    IDENTITY_AGE = 2;
    BISQ1_ACCOUNT_AGE = 3;
    BISQ1_SIGNED_ACCOUNT_AGE_WITNESS = 4;
  }

  string type = 1;
  Proof proof = 2;
}

message ChatUserProfile {
  string nickName = 1;
  network.NetworkId networkId = 2;
  repeated Reputation reputation = 3;
  repeated Role roles = 4;
}
message QuotedMessage {
  string profileId = 1;
  string nickName = 2;
  common.ByteArray pubKeyHash = 3;
  string message = 4;
}

message PrivateTradeChatMessage {
  string receiversProfileId = 1;
}
message PrivateDiscussionChatMessage {
  string receiversProfileId = 1;
}
message PublicDiscussionChatMessage {
}
message TradeChatOffer {
  uint64 btcAmount = 1;
  string quoteCurrencyCode = 2;
  repeated string paymentMethods = 3;
  string makersTradeTerms = 5;
}
message PublicTradeChatMessage {
  optional TradeChatOffer tradeChatOffer = 1;
}
message ChatMessage {
  string channelId = 1;
  optional string text = 2;
  ChatUserProfile author = 3;
  optional QuotedMessage quotedMessage = 4;
  uint64 date = 5;
  bool wasEdited = 6;
  network.MetaData metaData = 7;
  oneof message {
    PrivateTradeChatMessage privateTradeChatMessage = 20;
    PrivateDiscussionChatMessage privateDiscussionChatMessage = 21;
    PublicTradeChatMessage publicTradeChatMessage = 22;
    PublicDiscussionChatMessage publicDiscussionChatMessage = 23;
  }
}

enum NotificationSetting {
  ALL = 0;
  MENTION = 1;
  NEVER = 2;
}

message ChatUserIdentity {
  identity.Identity identity = 1;
  ChatUserProfile chatUserProfile = 2;
}

// Channels
message PrivateDiscussionChannel {
  ChatUserProfile peer = 1;
  ChatUserIdentity myChatUserIdentity = 2;
  repeated ChatMessage chatMessages = 3;
}
message PrivateTradeChannel {
  ChatUserProfile peer = 1;
  ChatUserIdentity myChatUserIdentity = 2;
  repeated ChatMessage chatMessages = 3;
}

message PublicTradeChannel {
  optional common.Market market = 1;
  bool isVisible = 2;
}
message PublicDiscussionChannel {
  string channelName = 1;
  string description = 2;
  ChatUserProfile channelAdmin = 3;
  repeated ChatUserProfile channelModerators = 4;
  bool isVisible = 5;
}
message Channel {
  string id = 1;
  NotificationSetting notificationSetting = 2;
  oneof message{
    PrivateTradeChannel privateTradeChannel = 10;
    PrivateDiscussionChannel privateDiscussionChannel = 11;
    PublicTradeChannel publicTradeChannel = 12;
    PublicDiscussionChannel publicDiscussionChannel = 13;
  }
}

// Stores
message UserProfileStore {
  repeated ChatUserIdentity chatUserIdentities = 1;
  ChatUserIdentity selectedChatUserIdentity = 2;
  map<string, Proof> verifiedProofOfBurnProofs = 3;
}

message ChatStore {
  repeated Channel privateTradeChannels = 1;
  repeated Channel privateDiscussionChannels = 2;
  repeated Channel publicTradeChannels = 3;
  repeated Channel publicDiscussionChannels = 4;
  Channel selectedTradeChannel = 5;
  Channel selectedDiscussionChannel = 6;
  repeated string customTags = 7;
  repeated string ignoredChatUserProfileIds = 8;
}

message TradeChatOfferStore {
}
